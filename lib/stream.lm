(define force
  (lambda (delayed)
    (delayed)))

(define empty-stream (quote ()))

(define empty-stream? null?)

(define head-stream
  (lambda (s)
    (elem s 1)))

(define tail-stream
  (lambda (s)
    (force (elem s 2))))

(define elem-stream
  (lambda (s i)
    (if (= i 1)
        (head-stream s)
        (elem-stream (tail-stream s) (- i 1)))))

(define eq-stream
  (lambda (s1 s2)
    (if (empty-stream? s1)
        (empty-stream? s2)
        (and (= (head-stream s1) (head-stream s2))
             (eq-stream (tail-stream s1) (tail-stream s2))))))

(define len-stream
  (lambda (s)
    (if (empty-stream? s)
        0
        (+ 1 (len-stream (tail-stream s))))))

(define init-stream
  (lambda (s)
    (if (= 1 (len-stream s))
        empty-stream
        (cons-stream (head-stream s) (init-stream (tail-stream s))))))

(define last-stream
  (lambda (s)
    (if (= 1 (len-stream s))
        (head-stream s)
        (last-stream (tail-stream s)))))

(define map-stream
  (lambda (f s)
    (if (empty-stream? s)
        empty-stream
        (cons-stream (f (head s)) (map-stream f (tail-stream s))))))

(define filter-stream
  (lambda (p s)
    (if (empty-stream? s)
        empty-stream
        (if (p (head-stream s))
            (cons-stream (head s) (filter-stream p (tail-stream s)))
            (filter-stream p (tail-stream s))))))

(define fold-stream
  (lambda (f i s)
    (if (empty-stream? s)
        i
        (fold-stream f (f i (head-stream s)) (tail-stream s)))))

(define for-each-stream
  (lambda (f s)
    (if (empty-stream? s)
        nil
        (begin
          (f (head-stream s))
          (for-each-stream f (tail-stream s))))))

(define take-stream
  (lambda (s n)
    (if (= n 0)
        empty-stream
        (cons-stream (head-stream s) (take-stream (tail-stream s) (- n 1))))))

(define drop-stream
  (lambda (s n)
    (if (empty-stream? s)
        s
        (if (= 0 n)
            s
            (drop-stream (tail-stream s) (- n 1))))))

(define zip-with-stream
  (lambda (f s1 s2)
    (if (or (empty-stream? s1) (empty-stream? s2))
        empty-stream
        (cons-stream (f (head-stream s1) (head-stream s2))
              (zip-with-stream f (tail-stream s1) (tail-stream s2))))))

(define zip-stream
  (partial3 zip-with-stream list))

(define repeat
  (lambda (x)
    (cons-stream x (repeat x))))

(define enum-with
  (lambda (f i)
    (cons-stream i (enum-with f (f i)))))
