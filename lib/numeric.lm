(define (neg x)
  (- 0 x))

(define (!= x y)
  (not (= x y)))

(define (> x y)
  (< y x))

(define (>= x y)
  (not (< x y)))

(define (<= x y)
  (>= y x))

(defmacro (inc! i) 
  (set! i (+ i 1)))

(define (even n)
  (= 0 (% n 2)))

(define odd
  (compose not even))

(define (max a b)
  (if (> a b) a b))

(define (min a b)
  (if (< a b) a b))

(define (max-list l)
  (if (= 1 (len l))
      (head l)
      (max (head l) (max-list (tail l)))))

(define (min-list l)
  (if (= 1 (len l))
      (head l)
      (min (head l) (min-list (tail l)))))

(define (max-stream s)
  (if (= 1 (len-stream s))
      (head-stream s)
      (max (head-stream s) (max-stream (tail-stream s)))))

(define (min-stream s)
  (if (= 1 (len-stream s))
      (head-stream s)
      (min (head-stream s) (min-stream (tail-stream s)))))

(define sum (fold + 0))

(define product (fold * 1))

(define sum-stream (fold-stream + 0))

(define product-stream (fold-stream * 1))

(define (range a b)
  (if (> a b)
      empty
      (cons a (range (+ 1 a) b))))

(define (range-stream a b)
  (if (> a b)
      empty-stream
      (cons-stream a (range-stream (+ 1 a) b))))

(define enum (enum-with (+ 1)))

(define naturals (enum 1))

(define add (zip-with +))

(define add-stream (zip-with-stream +))

(define (square x)
  (* x x))

(define (pow x n)
  (if (= n 0)
      1
      (if (even n)
          (pow (square x) (/ n 2))
          (* x (pow (square x) (/ (- n 1) 2))))))

(define (fact n)
  (product (range 1 n)))

(define (randint a b)
  (begin
    (define m (+ 1 (- b a)))
    (define bound (- rand-max (% rand-max m)))
    (define r (% (random) bound))
    (if (< r bound)
        (+ a (% r m))
        (randint a b))))

(define sort (sort-by <))

(define sort! (sort-by! <))
