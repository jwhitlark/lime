(define neg
  (lambda (x)
    (- 0 x)))

(define !=
  (lambda (x y)
    (not (= x y))))

(define >
  (lambda (x y)
    (< y x)))

(define >=
  (lambda (x y)
    (not (< x y))))

(define <=
  (lambda (x y)
    (>= y x)))

(define even
  (lambda (n)
    (= 0 (% n 2))))

(define odd
  (compose not even))

(define max
  (lambda (a b)
    (if (> a b) a b)))

(define min
  (lambda (a b)
    (if (< a b) a b)))

(define max-list
  (lambda (l)
    (if (= 1 (len l))
        (head l)
        (max (head l) (max-list (tail l))))))

(define min-list
  (lambda (l)
    (if (= 1 (len l))
        (head l)
        (min (head l) (min-list (tail l))))))

(define sum
  (lambda (l)
    (fold + 0 l)))

(define product
  (lambda (l)
    (fold * 1 l)))

(define range
  (lambda (a b)
    (if (> a b)
        (quote ())
        (cons a (range (+ 1 a) b)))))

(define square
  (lambda (x)
    (* x x)))

(define pow
  (lambda (x n)
    (if (= n 0)
      1
      (if (even n)
        (pow (square x) (/ n 2))
        (* x (pow (square x) (/ (- n 1) 2)))))))

(define fact
  (lambda (n)
    (product (range 1 n))))

