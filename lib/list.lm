(define empty (quote ()))

(define empty? (compose (= 0) len))

(define list? (compose not atom?))

(define (init l)
  (if (= 1 (len l))
      empty
      (cons (head l) (init (tail l)))))

(define (last l)
  (elem (len l) l))

(define (map f l)
  (if (empty? l)
      empty
      (cons (f (head l)) (map f (tail l)))))

(define (filter p l)
  (if (empty? l)
      empty
      (if (p (head l))
          (cons (head l) (filter p (tail l)))
          (filter p (tail l)))))

(define (fold f i l)
  (if (empty? l)
      i
      (fold f (f i (head l)) (tail l))))

(define (take n l)
  (if (= n 0)
      empty
      (cons (head l) (take (- n 1) (tail l)))))

(define (drop n l)
  (if (empty? l)
      empty
      (if (= 0 n)
          l
          (drop (- n 1) (tail l)))))

(define (take-while p l)
  (if (or (empty? l) (not (p (head l))))
      empty
      (cons (head l) (take-while p (tail l)))))

(define (drop-while p l)
  (if (empty? l)
      empty
      (if (p (head l))
          (drop-while p (tail l))
          l)))    

(define (zip-with f l1 l2)
  (if (or (empty? l1) (empty? l2))
      empty
      (cons (f (head l1) (head l2))
            (zip-with f (tail l1) (tail l2)))))

(define zip (zip-with list))

(define (count x l) 
  (len (filter (= x) l)))

(define (count-if p l)
  (len (filter p l)))

(define (all l)
  (if (empty? l)
      true
      (and (head l) (all (tail l)))))

(define (any l)
  (if (empty? l)
      false
      (or (head l) (any (tail l)))))

(define (contains? x l)
  (and (not (empty? l)) 
       (or (= x (head l)) 
           (contains x (tail l)))))

(define (concat l1 l2)
  (begin
    (define c l1)
    (for-each x l2
      (push-back! c x))
    c))

(define (concat! &l1 l2)
  (for-each x l2
    (push-back! l1)))

(define (swap! &l i j)
  (begin
    (define tmp (elem i l))
    (set-elem! l i (elem j l))
    (set-elem! l j tmp)))

(define (reverse l)
  (begin
    (define r empty)
    (for-each x l
      (push-front! r x))
    r))

(define (reverse! &l)
  (begin
    (define n (len l))
    (for i 1 (/ n 2) 
      (begin
        (define j (+ 1 (- n i)))
        (swap! l i j)))))

(define (shuffle! &l)
  (begin
    (define n (len l))
    (for i 1 n
      (swap! l i (+ i (randint 0 (- n i)))))))

(define (shuffle l)
  (begin
    (define s l)
    (shuffle! s)
    s))

(define (sample k l)
  (begin
    (define n (len l))
    (define s empty)
    (for i 1 n
      (if (<= (randint 1 (+ 1 (- n i)))
              (- k (len s)))
          (push-back! s (elem i l))
          nil))
    s))

(define (sort-by cmp l)
  (if (<= (len l) 1)
      l
      (begin
        (define n (len l))
        (define p (randint 1 n))
        (define pv (elem p l))
        (define lesser empty)
        (define greater empty)
        (for-each i (filter (!= p) (range 1 (len l)))
          (begin
            (define x (elem i l))
            (if (cmp x pv)    
                (push-back! lesser x)
                (push-back! greater x))))
        (concat (sort-by cmp lesser)
                (cons pv (sort-by cmp greater))))))

(define (partition! cmp &l left right p)
  (begin
    (define pv (elem p l))
    (swap! l p right)
    (define q left)
    (for i left (- right 1)
      (if (cmp (elem i l) pv)
          (begin 
            (swap! l i q)
            (set! q (+ q 1)))
          nil))
    (swap! l q right)
    q))

(define (quicksort! cmp &l left right)
  (if (< left right)
    (begin
      (define p (randint left right))
      (define p' (partition! cmp l left right p))
      (quicksort! cmp l left (- p' 1))
      (quicksort! cmp l (+ p' 1) right))
    nil))

(define (sort-by! cmp &l)
  (quicksort! cmp l 1 (len l)))
    
(define (map! f &l)
  (for i 1 (len l)
    (set-elem! l i (f (elem i l)))))

(define (filter! p &l)
  (set! l (filter p l)))

(define (take! n &l)
  (for i 1 (- (len l) n) 
    (pop-back! l)))

(define (drop! n &l)
  (for i 1 n 
    (pop-front! l)))

(define (take-while! p &l)
  (begin
    (define k 0)
    (define i 1)
    (while (p (elem i l))
      (begin
        (set! k (+ k 1))
        (set! i (+ i 1))))
    (for i 1 (- (len l) k)
      (pop-back! l))))

(define (drop-while! p &l)
  (while (p (head l))
    (pop-front! l)))
