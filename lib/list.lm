(define len
  (lambda (l)
    (if (null? l)
        0
        (+ 1 (len (tail l))))))

(define init
  (lambda (l)
    (if (= 1 (len l))
        (quote ())
        (cons (head l) (init (tail l))))))

(define last
  (lambda (l)
    (if (= 1 (len l))
        (head l)
        (last (tail l)))))

(define map
  (lambda (f l)
    (if (null? l)
        (quote ())
        (cons (f (head l)) (map f (tail l))))))

(define filter
  (lambda (p l)
    (if (null? l)
        (quote ())
        (if (p (head l))
            (cons (head l) (filter p (tail l)))
            (filter p (tail l))))))

(define fold
  (lambda (f i l)
    (if (null? l)
        i
        (fold f (f i (head l)) (tail l)))))

(define for-each
  (lambda (f l)
    (if (null? l)
        nil
        (begin
          (f (head l))
          (for-each f (tail l))))))

(define take
  (lambda (l n)
    (if (= n 0)
        (quote ())
        (cons (head l) (take (tail l) (- n 1))))))

(define drop
  (lambda (l n)
    (if (null? l)
        (quote ())
        (if (= 0 n)
            l
            (drop (tail l) (- n 1))))))

(define take-while
  (lambda (l p)
    (if (or (null? l) (not (p (head l))))
        (quote ())
        (cons (head l) (take-while (tail l) p)))))

(define drop-while
  (lambda (l p)
    (if (null? l)
        (quote ())
        (if (p (head l))
            (drop-while (tail l) p)
            l))))    

(define zip-with
  (lambda (f l1 l2)
    (if (or (null? l1) (null? l2))
        (quote ())
        (cons (f (head l1) (head l2))
              (zip-with f (tail l1) (tail l2))))))

(define zip (zip-with list))
